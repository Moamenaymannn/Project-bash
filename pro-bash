#! /usr/bin/bash

#awk '{print NR ": " $0}' script.sh > script_with_line_numbers.sh >> for line number
DB_PATH="./Database"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[0;33m'
RESET='\033[0m'

print_header() {
  echo -e "${YELLOW}===============================${RESET}"
  echo -e "$1"
  echo -e "${YELLOW}===============================${RESET}"
}

error_message() {
  echo -e "${RED}Error: $1${RESET}"
}

success_message() {
  echo -e "${GREEN}$1${RESET}"
}

prompt_next_action() {

  echo "1. Previous Step"
  echo "2. Return to Main Menu"
  read -p "Enter your choice: " choice
  case $choice in
    1) $1 ;;
    2) main_menu ;;
    *) error_message "Invalid choice. Returning to Main Menu..." && main_menu ;;
  esac
}

validate_name() {
clear
  local trimmed_name="${1//[[:space:]]/}"

  if [[ -z "$trimmed_name" || "$1" =~ [^a-zA-Z0-9_] ]]; then
    error_message "Invalid name. Only alphanumeric characters and underscores are allowed. No spaces are permitted."
    return 1
  fi
  return 0
}


main_menu(){ 
 clear
if [ ! -d "$DB_PATH" ]; then
  error_message "Database Directory not found!"
  print_header "Do you want to:"
  echo "1. Create Database Directory in Current Location ($PWD)"
  echo "2. Specify a Custom Path"
  echo "3. Exit"
  echo -e "${YELLOW}===============================${RESET}"
  read -p "Enter your choice: " sub_choice
  clear
  case $sub_choice in
    1) mkdir -p "$DB_PATH" && success_message "Database Directory Created in $PWD!" ;;
    2) 
       read -p "Enter the path: " custom_path
       DB_PATH="$custom_path"
       mkdir -p "$DB_PATH" && success_message "Database Directory Created at $DB_PATH!" ;;
    3) exit ;;
    *) error_message "Invalid choice, exiting program..." && main_menu ;;
  esac
fi

  print_header "Bash Shell DBMS"
  echo "1. Create Database"
  echo "2. List Databases"
  echo "3. Connect to Database"
  echo "4. Drop Database"
  echo "5. Exit"
  echo -e "${YELLOW}===============================${RESET}"
  read -p "Enter your choice: " choice
  
  case $choice in
  1) clear; create_database ;;
  2) clear; list_databases ;;
  3) clear; connect_to_databse ;;
  4) clear; drop_database ;;
  5) exit ;;
  *) echo -e " ${RED}Invalid Choice, Please try again! ${RESET}"
     read -p "press [Enter] to return Menu" 
     main_menu ;;
  esac
  }


create_database(){
  print_header "Create Database"
  read -p "Enter Database Name: " db_name
  validate_name "$db_name" || create_database

  if [ -d "$DB_PATH/$db_name" ]; then
    error_message "Database '$db_name' already exists!"
  else
    mkdir -p "$DB_PATH/$db_name"
    success_message "Database '$db_name' created successfully!"
  fi
  
  echo "1. Create Another Database"
  echo "2. Main menu"
  echo -e "${YELLOW}===============================${RESET}"
  read -p "Enter your choice: " choice
  
  case $choice in
  1) clear; create_database ;;
  2) clear; main_menu ;;
  *) error_message "Invalid Choice, Please try again!" && main_menu ;;
  esac
   }
   
list_databases() {
clear
  print_header "Available Databases"
 if [ -z "$(ls -A "$DB_PATH" 2>/dev/null)" ]; then
    error_message "No Databases Found!"
  echo "1. Create Database"
  echo "2. Main menu"
  echo -e "${YELLOW}===============================${RESET}"
  read -p "Enter your choice: " choice
  
  case $choice in
  1) clear; create_database ;;
  2) clear; main_menu ;;
  esac
  
else
    echo -e "${GREEN}"
    ls "$DB_PATH"
    echo -e "${RESET}" 
  fi
  
  echo "1. Connect to Database"
  echo "2. Main menu"
  echo -e "${YELLOW}===============================${RESET}"
  read -p "Enter your choice: " choice
  
  case $choice in
  1) clear; connect_to_databse ;;
  2) clear; main_menu ;;
  esac
}



connect_to_databse() {
  read -p "Enter Database Name: " db_name
  if [ -d "$DB_PATH/$db_name" ]; then
    success_message "Connected to Database '$db_name'."
    db_menu "$db_name"
  else
    error_message "Database '$db_name' does not exist!"
    prompt_next_action "connect_to_databse"
  fi
}
  
drop_database() {
  read -p "Enter Database Name: " db_name
  if [ -d "$DB_PATH/$db_name" ]; then
    rm -r "$DB_PATH/$db_name"
    success_message "Database '$db_name' dropped successfully!"
  else
    error_message "Database '$db_name' does not exist!"
  fi
  prompt_next_action "drop_database"
}


db_menu() {
clear
  local db_name=$1
  print_header "Database: $db_name"
  echo "1. Create Table"
  echo "2. List Tables"
  echo "3. Drop Table"
  echo "4. Insert into Table"
  echo "5. Select From Table"
  echo "6. Delete From Table"
  echo "7. Update Table"
  echo "8. Back to Main Menu"
  read -p "Enter your choice: " choice

  case $choice in
    1) create_table "$db_name" ;;
    2) list_tables "$db_name" ;;
    3) drop_table "$db_name" ;;
    4) insert_into_table "$db_name" ;;
    5) select_from_table "$db_name" ;;
    6) delete_from_table "$db_name" ;;
    7) update_table "$db_name" ;;
    8) main_menu ;;
    *) error_message "Invalid choice, please try again!" && db_menu "$db_name" ;;
  esac
}
create_table() {
  clear
  local db_name=$1

  print_header "Create Table in Database: $db_name"
  read -p "Enter Table Name: " table_name
  validate_name "$table_name" || create_table "$db_name"
  local table_path="$DB_PATH/$db_name/$table_name.txt"

  if [ -f "$table_path" ]; then
    error_message "Table '$table_name' already exists!"
  else
  
    read -p "Enter Columns (comma-separated): " columns
    IFS=',' read -r -a columns_array <<< "$columns"

    declare -a data_types

  
    for column in "${columns_array[@]}"; do
      echo "Select Data Type for '$column':"
      echo "1. Int"
      echo "2. Char"
      echo "3. Boolean"
      read -p "Enter your choice (1/2/3): " dtype_choice

      case $dtype_choice in
        1) data_types+=("Int") ;;
        2) data_types+=("Char") ;;
        3) data_types+=("Boolean") ;;
        *) error_message "Invalid choice, defaulting to Char"; data_types+=("Char") ;;
      esac
    done

    
    echo "Available Columns: ${columns_array[@]}"
    read -p "Enter the column name you want to set as Primary Key: " pk_column
    if [[ ! " ${columns_array[@]} " =~ " ${pk_column} " ]]; then
      error_message "Invalid column name for primary key!"
      create_table "$db_name"
    fi


    echo "${columns_array[@]}" | sed 's/ /,/g' > "$table_path.meta"
    echo "${data_types[@]}" | sed 's/ /,/g' > "$table_path.datatypes"

    touch "$table_path"
    success_message "Table '$table_name' created successfully with columns: ${columns_array[@]} and types: ${data_types[@]}"
  fi
  prompt_next_action "db_menu $db_name"
}

list_tables() {
clear
  local db_name=$1
  echo -e " ${GREEN} Available Tables in Database '$db_name': ${RESET} "
  echo -e "${YELLOW}===============================${RESET}"
  ls "$DB_PATH/$db_name"
  echo -e "${YELLOW}===============================${RESET}"
  prompt_next_action "db_menu $db_name"
}

drop_table() {
  local db_name=$1
  echo "Database: $db_name"
  read -p "Enter Table Name: " table_name
  local table_path="$DB_PATH/$db_name/$table_name"
  local meta_path="$table_path.meta"


  echo "Table path: $table_path"
  echo "Meta path: $meta_path"

  if [ -f "$table_path" ]; then
    if [ -f "$meta_path" ]; then
      rm "$table_path" "$meta_path"
      success_message "Table '$table_name' dropped successfully!"
    else
      rm "$table_path"
      success_message "Table '$table_name' dropped successfully, but no metadata file was found."
    fi
  else
    error_message "Table '$table_name' does not exist!"
  fi

 prompt_next_action "db_menu $db_name"
}

insert_into_table() {
  clear
  local db_name=$1
  print_header "Insert Data into Table"

  echo "Available Tables in Database $db_name:"
  tables=($(ls "$DB_PATH/$db_name" | grep -vE '\.meta$|\.datatypes$'))
  if [ ${#tables[@]} -eq 0 ]; then
    error_message "No tables found in database '$db_name'."
    prompt_next_action "db_menu $db_name"
  else
    for i in "${!tables[@]}"; do
      echo "$((i + 1)). ${tables[$i]}"
    done
    read -p "Enter Table Name to insert data into: " table_name

    echo -e "${YELLOW}===============================${RESET}"
    if [[ ! " ${tables[@]} " =~ " ${table_name} " ]]; then
      error_message "Table '$table_name' does not exist in database '$db_name'."
      insert_into_table "$db_name"
    fi

    local table_path="$DB_PATH/$db_name/$table_name"
    columns=$(cat "$table_path.meta")
    data_types=$(cat "$table_path.datatypes")
    echo "Columns: $columns"
    echo "Data Types: $data_types"
    echo -e "${YELLOW}===============================${RESET}"

   
    echo "Current Table Data:"
    if [ -s "$table_path" ]; then
      cat "$table_path"
    else
      echo "No data available yet."
    fi
    echo -e "${YELLOW}===============================${RESET}"
    
    while true; do
      read -p "Enter Values (comma-separated): " values
      IFS=',' read -r -a values_array <<< "$values"
      IFS=',' read -r -a column_array <<< "$columns"
      IFS=',' read -r -a data_types_array <<< "$data_types"
      
      if [ "${#values_array[@]}" -ne "${#column_array[@]}" ]; then
        error_message "The number of values does not match the number of columns!"
        continue
      fi

 
      primary_key_index=$(grep -n "PK" <<< "${column_array[*]}" | cut -d: -f1)
      if [ -z "$primary_key_index" ]; then
        error_message "No primary key defined in table metadata!"
        return
      fi

      primary_key_index=$((primary_key_index - 1))
      primary_key_value="${values_array[$primary_key_index]}"

  
      if ! check_primary_key "$db_name" "$table_name" "$primary_key_index" "$primary_key_value"; then
        error_message "Duplicate primary key value '$primary_key_value'!"
        echo "Please re-enter the values:"
        continue
      fi

      for i in "${!values_array[@]}"; do
        value="${values_array[$i]}"
        data_type="${data_types_array[$i]}"
        
        case "$data_type" in
          "Int")
            if ! [[ "$value" =~ ^-?[0-9]+$ ]]; then
              error_message "Value '$value' for column '${column_array[$i]}' must be an integer!"
              continue 2
            fi
            ;;
          "Char")
            if [[ ! "$value" =~ ^[A-Za-z]+$ ]]; then
              error_message "Value '$value' for column '${column_array[$i]}' must be a string!"
              continue 2
            fi
            ;;
          "Boolean")
            if [[ "$value" != "true" && "$value" != "false" ]]; then
              error_message "Value '$value' for column '${column_array[$i]}' must be either true or false!"
              continue 2
            fi
            ;;
          *)
            error_message "Unknown Data Type!"
            continue 2
            ;;
        esac
      done

      echo "$values" >> "$table_path"
      clear
      success_message "Data inserted into '$table_name'."
      break
    done
  fi
  prompt_next_action "db_menu $db_name"
}
