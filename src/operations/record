#!/bin/bash

function insert_record() {
    read -p "Enter table name: " table_name
    if [ ! -f "$DB_DIR/$CURRENT_DB/$table_name" ]; then
        error_msg "Table does not exist"
        return
    fi

    # Read metadata
    IFS='|' read -r col_names col_types is_pk < "$DB_DIR/$CURRENT_DB/$table_name"
    
    # Convert strings to arrays
    col_names=($col_names)
    col_types=($col_types)
    is_pk=($is_pk)
    
    values=""
    for ((i=0; i<${#col_names[@]}; i++)); do
        read -p "Enter value for ${col_names[i]} (${col_types[i]}): " value
        
        # Validate value type
        if ! validate_value "$value" "${col_types[i]}"; then
            error_msg "Invalid value for ${col_types[i]}"
            return
        fi
        
        # Check for duplicate primary key
        if [ "${is_pk[$i]}" == "1" ]; then
            if check_duplicate_key "$table_name" "$value" "$i"; then
                error_msg "Duplicate primary key value: $value"
                return
            fi
        fi
        
        values="$values$value|"
    done
    
    echo "$values" >> "$DB_DIR/$CURRENT_DB/$table_name"
    success_msg "Record inserted successfully"
}



function select_records() {
    read -p "Enter table name: " table_name
    if [ ! -f "$DB_DIR/$CURRENT_DB/$table_name" ]; then
        error_msg "Table does not exist"
        return
    fi

    # Read and display header
    IFS='|' read -r col_names col_types is_pk < "$DB_DIR/$CURRENT_DB/$table_name"
    result_msg "Table: $table_name"
    result_msg "----------------------------------------"
    result_msg "Columns: $col_names"
    result_msg "----------------------------------------"
    
    # Display records
    tail -n +2 "$DB_DIR/$CURRENT_DB/$table_name" | while IFS='|' read -r line; do
        result_msg "$line"
    done
    result_msg "----------------------------------------"
}

function delete_record() {
    read -p "Enter table name: " table_name
    if [ ! -f "$DB_DIR/$CURRENT_DB/$table_name" ]; then
        error_msg "Table does not exist"
        return
    fi
    
    read -p "Enter condition column: " condition_col
    read -p "Enter value to delete: " condition_val
    
    # Create temporary file
    temp_file=$(mktemp)
    # Copy header
    head -n 1 "$DB_DIR/$CURRENT_DB/$table_name" > "$temp_file"
    
    # Filter out matching records
    tail -n +2 "$DB_DIR/$CURRENT_DB/$table_name" | grep -v "$condition_val" >> "$temp_file"
    
    mv "$temp_file" "$DB_DIR/$CURRENT_DB/$table_name"
    success_msg "Record(s) deleted successfully"
}

function update_record() {
    read -p "Enter table name: " table_name
    if [ ! -f "$DB_DIR/$CURRENT_DB/$table_name" ]; then
        error_msg "Table does not exist"
        return
    fi
    
    read -p "Enter condition column: " condition_col
    read -p "Enter condition value: " condition_val
    read -p "Enter column to update: " update_col
    read -p "Enter new value: " new_val
    
    # Create temporary file
    temp_file=$(mktemp)
    # Copy header
    head -n 1 "$DB_DIR/$CURRENT_DB/$table_name" > "$temp_file"
    
    # Update matching records
    tail -n +2 "$DB_DIR/$CURRENT_DB/$table_name" | while IFS='|' read -r line; do
        if [[ $line == *"$condition_val"* ]]; then
            # Replace old value with new value
            echo "${line/$condition_val/$new_val}" >> "$temp_file"
        else
            echo "$line" >> "$temp_file"
        fi
    done
    
    mv "$temp_file" "$DB_DIR/$CURRENT_DB/$table_name"
    success_msg "Record(s) updated successfully"
}